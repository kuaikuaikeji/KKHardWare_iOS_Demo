#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2 (swift-5.2-RELEASE)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
@import iOSDFULibrary;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KKBLEPeripheralSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 臂带绑定结果
typedef SWIFT_ENUM(NSInteger, KKArmBandBindResult, open) {
/// 绑定成功
  KKArmBandBindResultSuccess = 0,
/// flash保存失败
  KKArmBandBindResultFlash = 1,
/// 设备处于运动模式中
  KKArmBandBindResultInSport = 2,
/// 超时
  KKArmBandBindResultTimeout = 3,
/// 未知错误
  KKArmBandBindResultUnkonw = 4,
};

enum KKPeripheralOfflineSportType : NSInteger;
@class KKArmBandHistoryDetailDataModel;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKArmBandHistoryDataModel")
@interface KKArmBandHistoryDataModel : NSObject
/// 运动类型
@property (nonatomic, readonly) enum KKPeripheralOfflineSportType sportType;
/// 开始时间
@property (nonatomic, readonly) NSTimeInterval startTime;
/// 持续时间
@property (nonatomic, readonly) NSInteger duration;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分米）
@property (nonatomic, readonly) NSInteger distance;
/// 详情
@property (nonatomic, copy) NSArray<KKArmBandHistoryDetailDataModel *> * _Nonnull details;
- (NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK31KKArmBandHistoryDetailDataModel")
@interface KKArmBandHistoryDetailDataModel : NSObject
/// 心率数组
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull heartRates;
/// 配速
@property (nonatomic, readonly) NSInteger pace;
/// 步频
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 读取历史数据结果
typedef SWIFT_ENUM(NSInteger, KKArmBandHistoryResult, open) {
/// 成功
  KKArmBandHistoryResultSuccess = 0,
/// 运动中
  KKArmBandHistoryResultInSport = 1,
};

enum KKPeripheralOnlineSportType : NSInteger;

/// 臂带运动数据模型
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK23KKArmBandSportDataModel")
@interface KKArmBandSportDataModel : NSObject
@property (nonatomic, readonly) enum KKPeripheralOnlineSportType sportType;
/// 心率
@property (nonatomic, readonly) NSInteger heartRate;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分⽶）
@property (nonatomic, readonly) NSInteger distance;
/// 配速（秒/公⾥）
@property (nonatomic, readonly) NSInteger pace;
/// 步频（步/分钟）
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 开始运动结果
typedef SWIFT_ENUM(NSInteger, KKArmBandStartSportResult, open) {
/// 开启成功
  KKArmBandStartSportResultSuccess = 0,
/// 充电中
  KKArmBandStartSportResultCharging = 1,
/// 电量过低
  KKArmBandStartSportResultChargeLow = 2,
/// 未知错误
  KKArmBandStartSportResultUnknown = 3,
};

enum KKPeripheralType : NSInteger;

/// 快快外设抽象类
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK12KKPeripheral_")
@protocol KKPeripheral
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
@end

@protocol KKBLEArmBandPeripheralDelegate;

/// 快快蓝牙臂带外设
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK22KKBLEArmBandPeripheral")
@interface KKBLEArmBandPeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end







enum KKSexType : NSInteger;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 设置LED亮度
/// \param level 亮度等级（1 ～ 10）
///
- (void)setBrightnessWithLevel:(NSInteger)level;
/// 设置时间（时间同步）
- (void)setTimeWithDate:(NSDate * _Nonnull)date;
/// 读取电量
- (void)readBattery;
/// 读取版本号
- (void)readVersion;
/// 检查新版本
- (void)checkNewVersion;
/// 设置用户信息
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
/// \param weight 体重（kg）
///
/// \param pulse 静态心率
///
- (void)setUserWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height weight:(double)weight pulse:(NSInteger)pulse;
/// 开始绑定
/// \param timeout 超时时间
///
- (void)bindWithTimeout:(double)timeout;
/// 开始运动
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence dataReturnCycle:(NSInteger)dataReturnCycle;
/// 开始运动（多设备运动使用）
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param time 多设备数据同步使用，保持时间一致
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence time:(NSDate * _Nonnull)time dataReturnCycle:(NSInteger)dataReturnCycle;
/// 读取运动数据
/// \param cal 当前的卡路里（同步数据使用，设备断开或其他异常情况）
///
- (void)readSportDataWithCal:(NSInteger)cal;
/// 停止运动
- (void)stopSport;
/// 停止运动（多设备运动使用）
/// \param time 多设备数据同步使用，保持时间一致
///
- (void)stopSportWithTime:(NSDate * _Nonnull)time;
/// 读取历史数据
- (void)readHistoryData;
/// 寻找设备
- (void)seek;
@end

@class KKPeripheralVersionModel;
@class KKPreipheralUpdateInfoModel;

/// 快快蓝牙臂带外设代理
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK30KKBLEArmBandPeripheralDelegate_")
@protocol KKBLEArmBandPeripheralDelegate
@optional
/// 绑定结果返回
/// \param peripheral 臂带外设
///
/// \param result 绑定结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBindResult:(enum KKArmBandBindResult)result;
/// 电量返回
/// \param peripheral 臂带外设
///
/// \param battery 电量（0 ~ 100）
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBattery:(NSInteger)battery;
/// 配置用户信息结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetUserInfoResult:(BOOL)result;
/// 配置亮度结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetBrightnessResult:(BOOL)result;
/// 同步时间结果
/// \param peripheral 臂带外设
///
/// \param result 是否同步成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSyncTimeResult:(BOOL)result;
/// 外设版本返回
/// \param peripheral 外设
///
/// \param version 版本信息
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveVersion:(KKPeripheralVersionModel * _Nonnull)version;
/// 检查新版结果返回
/// \param peripheral 外设
///
/// \param info 新版本信息，<code>nil</code> 表示没有新版本
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveNewVersionInfo:(KKPreipheralUpdateInfoModel * _Nullable)info;
/// 历史数据返回
/// \param peripheral 外设
///
/// \param result 结果
///
/// \param datas 数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveHistoryResult:(enum KKArmBandHistoryResult)result datas:(NSArray<KKArmBandHistoryDataModel *> * _Nonnull)datas;
/// 开始运动结果返回
/// \param peripheral 外设
///
/// \param result 开始结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStartSportResult:(enum KKArmBandStartSportResult)result;
/// 运动实时数据返回
/// \param peripheral 外设
///
/// \param data 运动数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didSportData:(KKArmBandSportDataModel * _Nonnull)data;
/// 停止运动结果返回
/// \param peripheral 外设
///
/// \param result 是否停止成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStopSportResult:(BOOL)result;
@end

enum KKBLECentralState : NSInteger;
@protocol KKBLECentralManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK19KKBLECentralManager")
@interface KKBLECentralManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KKBLECentralManager * _Nonnull manager;)
+ (KKBLECentralManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// 中央管理器状态
@property (nonatomic, readonly) enum KKBLECentralState state;
/// 代理
@property (nonatomic, weak) id <KKBLECentralManagerDelegate> _Nullable delegate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface KKBLECentralManager (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)scanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 扫描多个类型的外设
/// \param peripheralTypes 外设列表
///
- (void)scanWithPeripheralTypes:(NSArray<NSNumber *> * _Nonnull)peripheralTypes;
/// 停止扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)stopScanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 停止扫描（全部外设类型）
- (void)stopScan;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac timeout:(double)timeout;
/// 连接指定外设
/// \param peripheral 外设
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
/// 连接指定外设
/// \param peripheral 外设
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral timeout:(double)timeout;
/// 取消（断开）指定外设连接
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)cancelConnectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 取消（断开）指定外设连接
/// \param peripheral 外设
///
- (void)cancelConnectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK27KKBLECentralManagerDelegate_")
@protocol KKBLECentralManagerDelegate
/// 中心状态发送改变
/// \param central 中心
///
/// \param state 状态
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didUpdateState:(enum KKBLECentralState)state;
@optional
/// 发现外设
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param RSSI 信号强度
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDiscover:(id <KKPeripheral> _Nonnull)peripheral rssi:(NSNumber * _Nonnull)RSSI;
/// 外设连接成功
/// \param central 中心
///
/// \param peripheral 外设
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didConnect:(id <KKPeripheral> _Nonnull)peripheral;
/// 外设连接失败
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didFailToConnect:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 外设断开连接
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDisconnectPeripheral:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, KKBLECentralState, open) {
/// 未知
  KKBLECentralStateUnknown = 0,
/// 重置
  KKBLECentralStateResetting = 1,
/// 不支持
  KKBLECentralStateUnsupported = 2,
/// 未授权
  KKBLECentralStateUnauthorized = 3,
/// 电源关闭
  KKBLECentralStatePoweredOff = 4,
/// 电源打开
  KKBLECentralStatePoweredOn = 5,
};

@protocol KKBLEHealthScalePeripheralDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKBLEHealthScalePeripheral")
@interface KKBLEHealthScalePeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 读取身体数据
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
- (void)readBodyDataWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height;
/// 读取身体报告
- (void)readBodyReport;
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end





@class KKHealthScaleBodyDataModel;
enum KKHealthScaleBodyDataErrorType : NSInteger;
enum KKHealthScaleReportDataErrorType : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK34KKBLEHealthScalePeripheralDelegate_")
@protocol KKBLEHealthScalePeripheralDelegate
/// 接收到 身体数据
/// \param peripheral 外设
///
/// \param data 身体数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveBodyData:(KKHealthScaleBodyDataModel * _Nonnull)data errorType:(enum KKHealthScaleBodyDataErrorType)errorType;
/// 接受到报告数据
/// \param peripheral 外设
///
/// \param data 报告数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveReportData:(NSString * _Nullable)data errorType:(enum KKHealthScaleReportDataErrorType)errorType;
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK18KKBLEPeripheralAPI")
@interface KKBLEPeripheralAPI : NSObject
/// 是否授权
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAuth;)
+ (BOOL)isAuth SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAuth:(BOOL)value;
/// 是否开启日志，默认开始日志
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logEnabled;)
+ (BOOL)logEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogEnabled:(BOOL)value;
/// 注册APP
/// \param appID 在开发者中心申请的ID
///
+ (void)registerWithAppID:(NSString * _Nonnull)appID callBack:(void (^ _Nonnull)(BOOL))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KKBLEPeripheralDFUManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKBLEPeripheralDFUManager")
@interface KKBLEPeripheralDFUManager : NSObject
@property (nonatomic, weak) id <KKBLEPeripheralDFUManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 升级
/// \param peripheral 外设
///
/// \param url 固件地址
///
- (void)updateWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral url:(NSString * _Nonnull)url;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUProgressDelegate>
- (void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUServiceDelegate>
- (void)dfuStateDidChangeTo:(enum DFUState)state;
- (void)dfuError:(enum DFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
@end

@class CBCentralManager;

@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

enum KKBLEPeripheralDFUManagerError : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK33KKBLEPeripheralDFUManagerDelegate_")
@protocol KKBLEPeripheralDFUManagerDelegate
/// 升级成功回调
/// \param manager DFU管理器
///
- (void)dfuManagerUpdateSuccess:(KKBLEPeripheralDFUManager * _Nonnull)manager;
/// 升级失败回调
/// \param manager DFU管理器
///
/// \param error 错误
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateFailure:(enum KKBLEPeripheralDFUManagerError)error;
@optional
/// 升级进度回调
/// \param manager DFU管理器
///
/// \param progress 进度
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateProgress:(NSInteger)progress;
@end

typedef SWIFT_ENUM(NSInteger, KKBLEPeripheralDFUManagerError, open) {
/// 进入OTA失败
  KKBLEPeripheralDFUManagerErrorOta = 0,
/// 文件错误
  KKBLEPeripheralDFUManagerErrorFile = 1,
/// 其他原因
  KKBLEPeripheralDFUManagerErrorOther = 2,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyDataErrorType, open) {
/// 没有错误
  KKHealthScaleBodyDataErrorTypeNone = 0,
/// 阻抗有误,阻抗有误时, 不计算除BMI/idealWeightKg以外参数(写0)
  KKHealthScaleBodyDataErrorTypeImpedance = 1,
/// 年龄参数有误，需在 6 ~ 99岁(不计算除BMI/idealWeightKg以外参数)
  KKHealthScaleBodyDataErrorTypeAge = 2,
/// 体重参数有误，需在 10 ~ 200kg(有误不计算所有参数)
  KKHealthScaleBodyDataErrorTypeWeight = 3,
/// 身高参数有误，需在 90 ~ 220cm(不计算所有参数)
  KKHealthScaleBodyDataErrorTypeHeight = 4,
};

enum KKHealthScaleBodyType : NSInteger;
@class KKHealthScaleRatingModel;
enum KKHealthScaleBodyHealthType : NSInteger;
enum KKHealthScaleBodyFatGrade : NSInteger;
enum KKHealthScaleBodyHealthGrade : NSInteger;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKHealthScaleBodyDataModel")
@interface KKHealthScaleBodyDataModel : NSObject
/// 性别
@property (nonatomic) enum KKSexType sex;
/// 年龄(岁)，需在6 ~ 99岁
@property (nonatomic) NSInteger age;
/// 身高(cm)，需在 90 ~ 220cm
@property (nonatomic) double height;
/// 体重(kg)，需在 10  ~ 200kg
@property (nonatomic) double weight;
/// 身体类型
@property (nonatomic) enum KKHealthScaleBodyType bodyType;
/// 身体年龄,6~99岁
@property (nonatomic) NSInteger bodyAge;
/// 身体得分，50 ~ 100分
@property (nonatomic) NSInteger bodyScore;
/// 理想体重(kg)
@property (nonatomic) double idealWeight;
/// 标准体重(kg)
@property (nonatomic) double standardWeight;
/// 去脂体重(kg)
@property (nonatomic) double loseFatWeight;
/// 控制体重(kg)
@property (nonatomic) double controlWeight;
/// 人体质量指数, 分辨率0.1, 范围10.0 ~ 90.0
@property (nonatomic) double bmi;
/// BMI健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmiRatingList;
/// 基础代谢, 分辨率1, 范围500 ~ 10000
@property (nonatomic) NSInteger bmr;
/// BMR基础代谢健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmrRatingList;
/// 蛋白质率（%）, 范围2.0% ~ 30.0%
@property (nonatomic) double proteinPercentage;
/// 蛋白质健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull proteinRatingList;
/// 内脏脂肪, 分辨率1, 范围1 ~ 60
@property (nonatomic) NSInteger vfal;
/// 内脏脂肪等级标准字典,“标准-警惕”“警惕-危险”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull vfalRatingList;
/// 骨量(kg), 分辨率0.1, 范围0.5 ~ 8.0
@property (nonatomic) double boneWeight;
/// 骨量等级标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull boneRatingList;
/// 脂肪量(kg)
@property (nonatomic) double fatWeight;
/// 脂肪率(%), 分辨率0.1, 范围5.0% ~ 75.0%
@property (nonatomic) double fatPercentage;
/// 脂肪率健康标准字典”偏瘦-标准”“标准-警惕”“警惕-偏胖”“偏胖-肥胖”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull fatRatingList;
/// 脂肪控制量(kg)
@property (nonatomic) double fatControlWeight;
/// 皮下脂肪(%)
@property (nonatomic) double subcutaneousFatPercentage;
/// 水分率(%), 分辨率0.1, 范围35.0% ~ 75.0%
@property (nonatomic) double waterPercentage;
/// 水分率健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull waterRatingList;
/// 肌肉量(kg), 分辨率0.1, 范围10.0 ~ 120.0
@property (nonatomic) double muscleWeight;
/// 肌肉率(%),分辨率0.1，范围5%~90%
@property (nonatomic) double musclePercentage;
/// 肌肉量健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull muscleRatingList;
/// 肌肉控制量(kg)
@property (nonatomic) double muscleControlWeight;
/// 骨骼肌率(%)
@property (nonatomic) double skeletalPercentage;
/// 脚对脚阻抗值(Ω), 范围200.0 ~ 1200.0
@property (nonatomic) double twoLegImpedance;
/// 健康评估
@property (nonatomic) enum KKHealthScaleBodyHealthType healthType;
/// 肥胖等级
@property (nonatomic) enum KKHealthScaleBodyFatGrade fatGrade;
/// 健康等级
@property (nonatomic) enum KKHealthScaleBodyHealthGrade healthGrade;
- (NSString * _Nonnull)jsonsString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyFatGrade, open) {
/// 肥胖1级
  KKHealthScaleBodyFatGradeOne = 0,
/// 肥胖2级
  KKHealthScaleBodyFatGradeTwo = 1,
/// 肥胖3级
  KKHealthScaleBodyFatGradeThree = 2,
/// 参数错误
  KKHealthScaleBodyFatGradeError = 3,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthGrade, open) {
/// 偏瘦型
  KKHealthScaleBodyHealthGradeThin = 0,
/// 标准型
  KKHealthScaleBodyHealthGradeThinMuscle = 1,
/// 超重型
  KKHealthScaleBodyHealthGradeMuscular = 2,
/// 肥胖型
  KKHealthScaleBodyHealthGradeLackofexercise = 3,
/// 参数错误
  KKHealthScaleBodyHealthGradeError = 4,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthType, open) {
/// 健康存在隐患
  KKHealthScaleBodyHealthTypeAssessment1 = 0,
/// 亚健康
  KKHealthScaleBodyHealthTypeAssessment2 = 1,
/// 一般
  KKHealthScaleBodyHealthTypeAssessment3 = 2,
/// 良好
  KKHealthScaleBodyHealthTypeAssessment4 = 3,
/// 非常好
  KKHealthScaleBodyHealthTypeAssessment5 = 4,
/// 参数错误
  KKHealthScaleBodyHealthTypeError = 5,
};

/// 身体类型
typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyType, open) {
/// 偏瘦型
  KKHealthScaleBodyTypeThin = 0,
/// 偏瘦肌肉型
  KKHealthScaleBodyTypeThinMuscle = 1,
/// 肌肉发达型
  KKHealthScaleBodyTypeMuscular = 2,
/// 缺乏运动型
  KKHealthScaleBodyTypeLackofexercise = 3,
/// 标准型
  KKHealthScaleBodyTypeStandard = 4,
/// 标准肌肉型
  KKHealthScaleBodyTypeStandardMuscle = 5,
/// 浮肿肥胖型
  KKHealthScaleBodyTypeObesFat = 6,
/// 偏胖肌肉型
  KKHealthScaleBodyTypeFatMuscle = 7,
/// 肌肉型偏胖
  KKHealthScaleBodyTypeMuscleFat = 8,
/// 参数错误
  KKHealthScaleBodyTypeError = 9,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKHealthScaleRatingModel")
@interface KKHealthScaleRatingModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleReportDataErrorType, open) {
/// 没有错误
  KKHealthScaleReportDataErrorTypeNone = 0,
/// 网络
  KKHealthScaleReportDataErrorTypeNet = 1,
};


/// 离线运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOfflineSportType, open) {
/// 健步
  KKPeripheralOfflineSportTypeBriskWalking = 4,
/// 跑步
  KKPeripheralOfflineSportTypeRunning = 5,
/// 骑行
  KKPeripheralOfflineSportTypeRiding = 6,
/// 自由训练
  KKPeripheralOfflineSportTypeFree = 7,
};

/// 外设线上运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOnlineSportType, open) {
/// 室内跑步
  KKPeripheralOnlineSportTypeIndoorRunning = 8,
/// 室外跑步
  KKPeripheralOnlineSportTypeOutdoorRunning = 9,
/// 课程
  KKPeripheralOnlineSportTypeCourse = 10,
};

/// 快快外设类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralType, open) {
/// 臂带
  KKPeripheralTypeArmBand = 0,
/// 健康秤
  KKPeripheralTypeHealthScale = 1,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKPeripheralVersionModel")
@interface KKPeripheralVersionModel : NSObject
/// 固件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// 固件编译时间（UTC时间戳）
@property (nonatomic, readonly) NSTimeInterval firmwareCompileTime;
/// BootLoader版本
@property (nonatomic, readonly, copy) NSString * _Nonnull bootLoader;
/// 硬件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK27KKPreipheralUpdateInfoModel")
@interface KKPreipheralUpdateInfoModel : NSObject
/// 版本
@property (nonatomic, copy) NSString * _Nonnull version;
/// 详情
@property (nonatomic, copy) NSString * _Nonnull detail;
/// 图片
@property (nonatomic, copy) NSString * _Nonnull image;
/// 更新时间
@property (nonatomic) NSInteger updateTime;
/// 固件地址
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 性别
typedef SWIFT_ENUM(NSInteger, KKSexType, open) {
/// 女性
  KKSexTypeFemale = 0,
/// 男性
  KKSexTypeMale = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2 (swift-5.2-RELEASE)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
@import iOSDFULibrary;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KKBLEPeripheralSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 臂带绑定结果
typedef SWIFT_ENUM(NSInteger, KKArmBandBindResult, open) {
/// 绑定成功
  KKArmBandBindResultSuccess = 0,
/// flash保存失败
  KKArmBandBindResultFlash = 1,
/// 设备处于运动模式中
  KKArmBandBindResultInSport = 2,
/// 超时
  KKArmBandBindResultTimeout = 3,
/// 未知错误
  KKArmBandBindResultUnkonw = 4,
};

enum KKPeripheralOfflineSportType : NSInteger;
@class KKArmBandHistoryDetailDataModel;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKArmBandHistoryDataModel")
@interface KKArmBandHistoryDataModel : NSObject
/// 运动类型
@property (nonatomic, readonly) enum KKPeripheralOfflineSportType sportType;
/// 开始时间
@property (nonatomic, readonly) NSTimeInterval startTime;
/// 持续时间
@property (nonatomic, readonly) NSInteger duration;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分米）
@property (nonatomic, readonly) NSInteger distance;
/// 详情
@property (nonatomic, copy) NSArray<KKArmBandHistoryDetailDataModel *> * _Nonnull details;
- (NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK31KKArmBandHistoryDetailDataModel")
@interface KKArmBandHistoryDetailDataModel : NSObject
/// 心率数组
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull heartRates;
/// 配速
@property (nonatomic, readonly) NSInteger pace;
/// 步频
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 读取历史数据结果
typedef SWIFT_ENUM(NSInteger, KKArmBandHistoryResult, open) {
/// 成功
  KKArmBandHistoryResultSuccess = 0,
/// 运动中
  KKArmBandHistoryResultInSport = 1,
};

enum KKPeripheralOnlineSportType : NSInteger;

/// 臂带运动数据模型
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK23KKArmBandSportDataModel")
@interface KKArmBandSportDataModel : NSObject
@property (nonatomic, readonly) enum KKPeripheralOnlineSportType sportType;
/// 心率
@property (nonatomic, readonly) NSInteger heartRate;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分⽶）
@property (nonatomic, readonly) NSInteger distance;
/// 配速（秒/公⾥）
@property (nonatomic, readonly) NSInteger pace;
/// 步频（步/分钟）
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 开始运动结果
typedef SWIFT_ENUM(NSInteger, KKArmBandStartSportResult, open) {
/// 开启成功
  KKArmBandStartSportResultSuccess = 0,
/// 充电中
  KKArmBandStartSportResultCharging = 1,
/// 电量过低
  KKArmBandStartSportResultChargeLow = 2,
/// 未知错误
  KKArmBandStartSportResultUnknown = 3,
};

enum KKPeripheralType : NSInteger;

/// 快快外设抽象类
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK12KKPeripheral_")
@protocol KKPeripheral
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
@end

@protocol KKBLEArmBandPeripheralDelegate;

/// 快快蓝牙臂带外设
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK22KKBLEArmBandPeripheral")
@interface KKBLEArmBandPeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end







enum KKSexType : NSInteger;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 设置LED亮度
/// \param level 亮度等级（1 ～ 10）
///
- (void)setBrightnessWithLevel:(NSInteger)level;
/// 设置时间（时间同步）
- (void)setTimeWithDate:(NSDate * _Nonnull)date;
/// 读取电量
- (void)readBattery;
/// 读取版本号
- (void)readVersion;
/// 检查新版本
- (void)checkNewVersion;
/// 设置用户信息
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
/// \param weight 体重（kg）
///
/// \param pulse 静态心率
///
- (void)setUserWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height weight:(double)weight pulse:(NSInteger)pulse;
/// 开始绑定
/// \param timeout 超时时间
///
- (void)bindWithTimeout:(double)timeout;
/// 开始运动
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence dataReturnCycle:(NSInteger)dataReturnCycle;
/// 开始运动（多设备运动使用）
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param time 多设备数据同步使用，保持时间一致
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence time:(NSDate * _Nonnull)time dataReturnCycle:(NSInteger)dataReturnCycle;
/// 读取运动数据
/// \param cal 当前的卡路里（同步数据使用，设备断开或其他异常情况）
///
- (void)readSportDataWithCal:(NSInteger)cal;
/// 停止运动
- (void)stopSport;
/// 停止运动（多设备运动使用）
/// \param time 多设备数据同步使用，保持时间一致
///
- (void)stopSportWithTime:(NSDate * _Nonnull)time;
/// 读取历史数据
- (void)readHistoryData;
/// 寻找设备
- (void)seek;
@end

@class KKPeripheralVersionModel;
@class KKPreipheralUpdateInfoModel;

/// 快快蓝牙臂带外设代理
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK30KKBLEArmBandPeripheralDelegate_")
@protocol KKBLEArmBandPeripheralDelegate
@optional
/// 绑定结果返回
/// \param peripheral 臂带外设
///
/// \param result 绑定结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBindResult:(enum KKArmBandBindResult)result;
/// 电量返回
/// \param peripheral 臂带外设
///
/// \param battery 电量（0 ~ 100）
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBattery:(NSInteger)battery;
/// 配置用户信息结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetUserInfoResult:(BOOL)result;
/// 配置亮度结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetBrightnessResult:(BOOL)result;
/// 同步时间结果
/// \param peripheral 臂带外设
///
/// \param result 是否同步成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSyncTimeResult:(BOOL)result;
/// 外设版本返回
/// \param peripheral 外设
///
/// \param version 版本信息
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveVersion:(KKPeripheralVersionModel * _Nonnull)version;
/// 检查新版结果返回
/// \param peripheral 外设
///
/// \param info 新版本信息，<code>nil</code> 表示没有新版本
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveNewVersionInfo:(KKPreipheralUpdateInfoModel * _Nullable)info;
/// 历史数据返回
/// \param peripheral 外设
///
/// \param result 结果
///
/// \param datas 数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveHistoryResult:(enum KKArmBandHistoryResult)result datas:(NSArray<KKArmBandHistoryDataModel *> * _Nonnull)datas;
/// 开始运动结果返回
/// \param peripheral 外设
///
/// \param result 开始结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStartSportResult:(enum KKArmBandStartSportResult)result;
/// 运动实时数据返回
/// \param peripheral 外设
///
/// \param data 运动数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didSportData:(KKArmBandSportDataModel * _Nonnull)data;
/// 停止运动结果返回
/// \param peripheral 外设
///
/// \param result 是否停止成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStopSportResult:(BOOL)result;
@end

enum KKBLECentralState : NSInteger;
@protocol KKBLECentralManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK19KKBLECentralManager")
@interface KKBLECentralManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KKBLECentralManager * _Nonnull manager;)
+ (KKBLECentralManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// 中央管理器状态
@property (nonatomic, readonly) enum KKBLECentralState state;
/// 代理
@property (nonatomic, weak) id <KKBLECentralManagerDelegate> _Nullable delegate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface KKBLECentralManager (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)scanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 扫描多个类型的外设
/// \param peripheralTypes 外设列表
///
- (void)scanWithPeripheralTypes:(NSArray<NSNumber *> * _Nonnull)peripheralTypes;
/// 停止扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)stopScanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 停止扫描（全部外设类型）
- (void)stopScan;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac timeout:(double)timeout;
/// 连接指定外设
/// \param peripheral 外设
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
/// 连接指定外设
/// \param peripheral 外设
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral timeout:(double)timeout;
/// 取消（断开）指定外设连接
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)cancelConnectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 取消（断开）指定外设连接
/// \param peripheral 外设
///
- (void)cancelConnectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK27KKBLECentralManagerDelegate_")
@protocol KKBLECentralManagerDelegate
/// 中心状态发送改变
/// \param central 中心
///
/// \param state 状态
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didUpdateState:(enum KKBLECentralState)state;
@optional
/// 发现外设
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param RSSI 信号强度
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDiscover:(id <KKPeripheral> _Nonnull)peripheral rssi:(NSNumber * _Nonnull)RSSI;
/// 外设连接成功
/// \param central 中心
///
/// \param peripheral 外设
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didConnect:(id <KKPeripheral> _Nonnull)peripheral;
/// 外设连接失败
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didFailToConnect:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 外设断开连接
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDisconnectPeripheral:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, KKBLECentralState, open) {
/// 未知
  KKBLECentralStateUnknown = 0,
/// 重置
  KKBLECentralStateResetting = 1,
/// 不支持
  KKBLECentralStateUnsupported = 2,
/// 未授权
  KKBLECentralStateUnauthorized = 3,
/// 电源关闭
  KKBLECentralStatePoweredOff = 4,
/// 电源打开
  KKBLECentralStatePoweredOn = 5,
};

@protocol KKBLEHealthScalePeripheralDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKBLEHealthScalePeripheral")
@interface KKBLEHealthScalePeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 读取身体数据
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
- (void)readBodyDataWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height;
/// 读取身体报告
- (void)readBodyReport;
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end





@class KKHealthScaleBodyDataModel;
enum KKHealthScaleBodyDataErrorType : NSInteger;
enum KKHealthScaleReportDataErrorType : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK34KKBLEHealthScalePeripheralDelegate_")
@protocol KKBLEHealthScalePeripheralDelegate
/// 接收到 身体数据
/// \param peripheral 外设
///
/// \param data 身体数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveBodyData:(KKHealthScaleBodyDataModel * _Nonnull)data errorType:(enum KKHealthScaleBodyDataErrorType)errorType;
/// 接受到报告数据
/// \param peripheral 外设
///
/// \param data 报告数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveReportData:(NSString * _Nullable)data errorType:(enum KKHealthScaleReportDataErrorType)errorType;
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK18KKBLEPeripheralAPI")
@interface KKBLEPeripheralAPI : NSObject
/// 是否授权
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAuth;)
+ (BOOL)isAuth SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAuth:(BOOL)value;
/// 是否开启日志，默认开始日志
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logEnabled;)
+ (BOOL)logEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogEnabled:(BOOL)value;
/// 注册APP
/// \param appID 在开发者中心申请的ID
///
+ (void)registerWithAppID:(NSString * _Nonnull)appID callBack:(void (^ _Nonnull)(BOOL))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KKBLEPeripheralDFUManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKBLEPeripheralDFUManager")
@interface KKBLEPeripheralDFUManager : NSObject
@property (nonatomic, weak) id <KKBLEPeripheralDFUManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 升级
/// \param peripheral 外设
///
/// \param url 固件地址
///
- (void)updateWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral url:(NSString * _Nonnull)url;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUProgressDelegate>
- (void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUServiceDelegate>
- (void)dfuStateDidChangeTo:(enum DFUState)state;
- (void)dfuError:(enum DFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
@end

@class CBCentralManager;

@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

enum KKBLEPeripheralDFUManagerError : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK33KKBLEPeripheralDFUManagerDelegate_")
@protocol KKBLEPeripheralDFUManagerDelegate
/// 升级成功回调
/// \param manager DFU管理器
///
- (void)dfuManagerUpdateSuccess:(KKBLEPeripheralDFUManager * _Nonnull)manager;
/// 升级失败回调
/// \param manager DFU管理器
///
/// \param error 错误
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateFailure:(enum KKBLEPeripheralDFUManagerError)error;
@optional
/// 升级进度回调
/// \param manager DFU管理器
///
/// \param progress 进度
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateProgress:(NSInteger)progress;
@end

typedef SWIFT_ENUM(NSInteger, KKBLEPeripheralDFUManagerError, open) {
/// 进入OTA失败
  KKBLEPeripheralDFUManagerErrorOta = 0,
/// 文件错误
  KKBLEPeripheralDFUManagerErrorFile = 1,
/// 其他原因
  KKBLEPeripheralDFUManagerErrorOther = 2,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyDataErrorType, open) {
/// 没有错误
  KKHealthScaleBodyDataErrorTypeNone = 0,
/// 阻抗有误,阻抗有误时, 不计算除BMI/idealWeightKg以外参数(写0)
  KKHealthScaleBodyDataErrorTypeImpedance = 1,
/// 年龄参数有误，需在 6 ~ 99岁(不计算除BMI/idealWeightKg以外参数)
  KKHealthScaleBodyDataErrorTypeAge = 2,
/// 体重参数有误，需在 10 ~ 200kg(有误不计算所有参数)
  KKHealthScaleBodyDataErrorTypeWeight = 3,
/// 身高参数有误，需在 90 ~ 220cm(不计算所有参数)
  KKHealthScaleBodyDataErrorTypeHeight = 4,
};

enum KKHealthScaleBodyType : NSInteger;
@class KKHealthScaleRatingModel;
enum KKHealthScaleBodyHealthType : NSInteger;
enum KKHealthScaleBodyFatGrade : NSInteger;
enum KKHealthScaleBodyHealthGrade : NSInteger;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKHealthScaleBodyDataModel")
@interface KKHealthScaleBodyDataModel : NSObject
/// 性别
@property (nonatomic) enum KKSexType sex;
/// 年龄(岁)，需在6 ~ 99岁
@property (nonatomic) NSInteger age;
/// 身高(cm)，需在 90 ~ 220cm
@property (nonatomic) double height;
/// 体重(kg)，需在 10  ~ 200kg
@property (nonatomic) double weight;
/// 身体类型
@property (nonatomic) enum KKHealthScaleBodyType bodyType;
/// 身体年龄,6~99岁
@property (nonatomic) NSInteger bodyAge;
/// 身体得分，50 ~ 100分
@property (nonatomic) NSInteger bodyScore;
/// 理想体重(kg)
@property (nonatomic) double idealWeight;
/// 标准体重(kg)
@property (nonatomic) double standardWeight;
/// 去脂体重(kg)
@property (nonatomic) double loseFatWeight;
/// 控制体重(kg)
@property (nonatomic) double controlWeight;
/// 人体质量指数, 分辨率0.1, 范围10.0 ~ 90.0
@property (nonatomic) double bmi;
/// BMI健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmiRatingList;
/// 基础代谢, 分辨率1, 范围500 ~ 10000
@property (nonatomic) NSInteger bmr;
/// BMR基础代谢健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmrRatingList;
/// 蛋白质率（%）, 范围2.0% ~ 30.0%
@property (nonatomic) double proteinPercentage;
/// 蛋白质健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull proteinRatingList;
/// 内脏脂肪, 分辨率1, 范围1 ~ 60
@property (nonatomic) NSInteger vfal;
/// 内脏脂肪等级标准字典,“标准-警惕”“警惕-危险”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull vfalRatingList;
/// 骨量(kg), 分辨率0.1, 范围0.5 ~ 8.0
@property (nonatomic) double boneWeight;
/// 骨量等级标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull boneRatingList;
/// 脂肪量(kg)
@property (nonatomic) double fatWeight;
/// 脂肪率(%), 分辨率0.1, 范围5.0% ~ 75.0%
@property (nonatomic) double fatPercentage;
/// 脂肪率健康标准字典”偏瘦-标准”“标准-警惕”“警惕-偏胖”“偏胖-肥胖”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull fatRatingList;
/// 脂肪控制量(kg)
@property (nonatomic) double fatControlWeight;
/// 皮下脂肪(%)
@property (nonatomic) double subcutaneousFatPercentage;
/// 水分率(%), 分辨率0.1, 范围35.0% ~ 75.0%
@property (nonatomic) double waterPercentage;
/// 水分率健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull waterRatingList;
/// 肌肉量(kg), 分辨率0.1, 范围10.0 ~ 120.0
@property (nonatomic) double muscleWeight;
/// 肌肉率(%),分辨率0.1，范围5%~90%
@property (nonatomic) double musclePercentage;
/// 肌肉量健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull muscleRatingList;
/// 肌肉控制量(kg)
@property (nonatomic) double muscleControlWeight;
/// 骨骼肌率(%)
@property (nonatomic) double skeletalPercentage;
/// 脚对脚阻抗值(Ω), 范围200.0 ~ 1200.0
@property (nonatomic) double twoLegImpedance;
/// 健康评估
@property (nonatomic) enum KKHealthScaleBodyHealthType healthType;
/// 肥胖等级
@property (nonatomic) enum KKHealthScaleBodyFatGrade fatGrade;
/// 健康等级
@property (nonatomic) enum KKHealthScaleBodyHealthGrade healthGrade;
- (NSString * _Nonnull)jsonsString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyFatGrade, open) {
/// 肥胖1级
  KKHealthScaleBodyFatGradeOne = 0,
/// 肥胖2级
  KKHealthScaleBodyFatGradeTwo = 1,
/// 肥胖3级
  KKHealthScaleBodyFatGradeThree = 2,
/// 参数错误
  KKHealthScaleBodyFatGradeError = 3,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthGrade, open) {
/// 偏瘦型
  KKHealthScaleBodyHealthGradeThin = 0,
/// 标准型
  KKHealthScaleBodyHealthGradeThinMuscle = 1,
/// 超重型
  KKHealthScaleBodyHealthGradeMuscular = 2,
/// 肥胖型
  KKHealthScaleBodyHealthGradeLackofexercise = 3,
/// 参数错误
  KKHealthScaleBodyHealthGradeError = 4,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthType, open) {
/// 健康存在隐患
  KKHealthScaleBodyHealthTypeAssessment1 = 0,
/// 亚健康
  KKHealthScaleBodyHealthTypeAssessment2 = 1,
/// 一般
  KKHealthScaleBodyHealthTypeAssessment3 = 2,
/// 良好
  KKHealthScaleBodyHealthTypeAssessment4 = 3,
/// 非常好
  KKHealthScaleBodyHealthTypeAssessment5 = 4,
/// 参数错误
  KKHealthScaleBodyHealthTypeError = 5,
};

/// 身体类型
typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyType, open) {
/// 偏瘦型
  KKHealthScaleBodyTypeThin = 0,
/// 偏瘦肌肉型
  KKHealthScaleBodyTypeThinMuscle = 1,
/// 肌肉发达型
  KKHealthScaleBodyTypeMuscular = 2,
/// 缺乏运动型
  KKHealthScaleBodyTypeLackofexercise = 3,
/// 标准型
  KKHealthScaleBodyTypeStandard = 4,
/// 标准肌肉型
  KKHealthScaleBodyTypeStandardMuscle = 5,
/// 浮肿肥胖型
  KKHealthScaleBodyTypeObesFat = 6,
/// 偏胖肌肉型
  KKHealthScaleBodyTypeFatMuscle = 7,
/// 肌肉型偏胖
  KKHealthScaleBodyTypeMuscleFat = 8,
/// 参数错误
  KKHealthScaleBodyTypeError = 9,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKHealthScaleRatingModel")
@interface KKHealthScaleRatingModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleReportDataErrorType, open) {
/// 没有错误
  KKHealthScaleReportDataErrorTypeNone = 0,
/// 网络
  KKHealthScaleReportDataErrorTypeNet = 1,
};


/// 离线运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOfflineSportType, open) {
/// 健步
  KKPeripheralOfflineSportTypeBriskWalking = 4,
/// 跑步
  KKPeripheralOfflineSportTypeRunning = 5,
/// 骑行
  KKPeripheralOfflineSportTypeRiding = 6,
/// 自由训练
  KKPeripheralOfflineSportTypeFree = 7,
};

/// 外设线上运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOnlineSportType, open) {
/// 室内跑步
  KKPeripheralOnlineSportTypeIndoorRunning = 8,
/// 室外跑步
  KKPeripheralOnlineSportTypeOutdoorRunning = 9,
/// 课程
  KKPeripheralOnlineSportTypeCourse = 10,
};

/// 快快外设类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralType, open) {
/// 臂带
  KKPeripheralTypeArmBand = 0,
/// 健康秤
  KKPeripheralTypeHealthScale = 1,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKPeripheralVersionModel")
@interface KKPeripheralVersionModel : NSObject
/// 固件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// 固件编译时间（UTC时间戳）
@property (nonatomic, readonly) NSTimeInterval firmwareCompileTime;
/// BootLoader版本
@property (nonatomic, readonly, copy) NSString * _Nonnull bootLoader;
/// 硬件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK27KKPreipheralUpdateInfoModel")
@interface KKPreipheralUpdateInfoModel : NSObject
/// 版本
@property (nonatomic, copy) NSString * _Nonnull version;
/// 详情
@property (nonatomic, copy) NSString * _Nonnull detail;
/// 图片
@property (nonatomic, copy) NSString * _Nonnull image;
/// 更新时间
@property (nonatomic) NSInteger updateTime;
/// 固件地址
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 性别
typedef SWIFT_ENUM(NSInteger, KKSexType, open) {
/// 女性
  KKSexTypeFemale = 0,
/// 男性
  KKSexTypeMale = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2 (swift-5.2-RELEASE)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
@import iOSDFULibrary;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KKBLEPeripheralSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 臂带绑定结果
typedef SWIFT_ENUM(NSInteger, KKArmBandBindResult, open) {
/// 绑定成功
  KKArmBandBindResultSuccess = 0,
/// flash保存失败
  KKArmBandBindResultFlash = 1,
/// 设备处于运动模式中
  KKArmBandBindResultInSport = 2,
/// 超时
  KKArmBandBindResultTimeout = 3,
/// 未知错误
  KKArmBandBindResultUnkonw = 4,
};

enum KKPeripheralOfflineSportType : NSInteger;
@class KKArmBandHistoryDetailDataModel;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKArmBandHistoryDataModel")
@interface KKArmBandHistoryDataModel : NSObject
/// 运动类型
@property (nonatomic, readonly) enum KKPeripheralOfflineSportType sportType;
/// 开始时间
@property (nonatomic, readonly) NSTimeInterval startTime;
/// 持续时间
@property (nonatomic, readonly) NSInteger duration;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分米）
@property (nonatomic, readonly) NSInteger distance;
/// 详情
@property (nonatomic, copy) NSArray<KKArmBandHistoryDetailDataModel *> * _Nonnull details;
- (NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK31KKArmBandHistoryDetailDataModel")
@interface KKArmBandHistoryDetailDataModel : NSObject
/// 心率数组
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull heartRates;
/// 配速
@property (nonatomic, readonly) NSInteger pace;
/// 步频
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 读取历史数据结果
typedef SWIFT_ENUM(NSInteger, KKArmBandHistoryResult, open) {
/// 成功
  KKArmBandHistoryResultSuccess = 0,
/// 运动中
  KKArmBandHistoryResultInSport = 1,
};

enum KKPeripheralOnlineSportType : NSInteger;

/// 臂带运动数据模型
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK23KKArmBandSportDataModel")
@interface KKArmBandSportDataModel : NSObject
@property (nonatomic, readonly) enum KKPeripheralOnlineSportType sportType;
/// 心率
@property (nonatomic, readonly) NSInteger heartRate;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分⽶）
@property (nonatomic, readonly) NSInteger distance;
/// 配速（秒/公⾥）
@property (nonatomic, readonly) NSInteger pace;
/// 步频（步/分钟）
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 开始运动结果
typedef SWIFT_ENUM(NSInteger, KKArmBandStartSportResult, open) {
/// 开启成功
  KKArmBandStartSportResultSuccess = 0,
/// 充电中
  KKArmBandStartSportResultCharging = 1,
/// 电量过低
  KKArmBandStartSportResultChargeLow = 2,
/// 未知错误
  KKArmBandStartSportResultUnknown = 3,
};

enum KKPeripheralType : NSInteger;

/// 快快外设抽象类
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK12KKPeripheral_")
@protocol KKPeripheral
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
@end

@protocol KKBLEArmBandPeripheralDelegate;

/// 快快蓝牙臂带外设
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK22KKBLEArmBandPeripheral")
@interface KKBLEArmBandPeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end







enum KKSexType : NSInteger;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 设置LED亮度
/// \param level 亮度等级（1 ～ 10）
///
- (void)setBrightnessWithLevel:(NSInteger)level;
/// 设置时间（时间同步）
- (void)setTimeWithDate:(NSDate * _Nonnull)date;
/// 读取电量
- (void)readBattery;
/// 读取版本号
- (void)readVersion;
/// 检查新版本
- (void)checkNewVersion;
/// 设置用户信息
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
/// \param weight 体重（kg）
///
/// \param pulse 静态心率
///
- (void)setUserWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height weight:(double)weight pulse:(NSInteger)pulse;
/// 开始绑定
/// \param timeout 超时时间
///
- (void)bindWithTimeout:(double)timeout;
/// 开始运动
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence dataReturnCycle:(NSInteger)dataReturnCycle;
/// 开始运动（多设备运动使用）
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param time 多设备数据同步使用，保持时间一致
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence time:(NSDate * _Nonnull)time dataReturnCycle:(NSInteger)dataReturnCycle;
/// 读取运动数据
/// \param cal 当前的卡路里（同步数据使用，设备断开或其他异常情况）
///
- (void)readSportDataWithCal:(NSInteger)cal;
/// 停止运动
- (void)stopSport;
/// 停止运动（多设备运动使用）
/// \param time 多设备数据同步使用，保持时间一致
///
- (void)stopSportWithTime:(NSDate * _Nonnull)time;
/// 读取历史数据
- (void)readHistoryData;
/// 寻找设备
- (void)seek;
@end

@class KKPeripheralVersionModel;
@class KKPreipheralUpdateInfoModel;

/// 快快蓝牙臂带外设代理
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK30KKBLEArmBandPeripheralDelegate_")
@protocol KKBLEArmBandPeripheralDelegate
@optional
/// 绑定结果返回
/// \param peripheral 臂带外设
///
/// \param result 绑定结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBindResult:(enum KKArmBandBindResult)result;
/// 电量返回
/// \param peripheral 臂带外设
///
/// \param battery 电量（0 ~ 100）
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBattery:(NSInteger)battery;
/// 配置用户信息结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetUserInfoResult:(BOOL)result;
/// 配置亮度结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetBrightnessResult:(BOOL)result;
/// 同步时间结果
/// \param peripheral 臂带外设
///
/// \param result 是否同步成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSyncTimeResult:(BOOL)result;
/// 外设版本返回
/// \param peripheral 外设
///
/// \param version 版本信息
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveVersion:(KKPeripheralVersionModel * _Nonnull)version;
/// 检查新版结果返回
/// \param peripheral 外设
///
/// \param info 新版本信息，<code>nil</code> 表示没有新版本
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveNewVersionInfo:(KKPreipheralUpdateInfoModel * _Nullable)info;
/// 历史数据返回
/// \param peripheral 外设
///
/// \param result 结果
///
/// \param datas 数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveHistoryResult:(enum KKArmBandHistoryResult)result datas:(NSArray<KKArmBandHistoryDataModel *> * _Nonnull)datas;
/// 开始运动结果返回
/// \param peripheral 外设
///
/// \param result 开始结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStartSportResult:(enum KKArmBandStartSportResult)result;
/// 运动实时数据返回
/// \param peripheral 外设
///
/// \param data 运动数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didSportData:(KKArmBandSportDataModel * _Nonnull)data;
/// 停止运动结果返回
/// \param peripheral 外设
///
/// \param result 是否停止成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStopSportResult:(BOOL)result;
@end

enum KKBLECentralState : NSInteger;
@protocol KKBLECentralManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK19KKBLECentralManager")
@interface KKBLECentralManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KKBLECentralManager * _Nonnull manager;)
+ (KKBLECentralManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// 中央管理器状态
@property (nonatomic, readonly) enum KKBLECentralState state;
/// 代理
@property (nonatomic, weak) id <KKBLECentralManagerDelegate> _Nullable delegate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface KKBLECentralManager (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)scanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 扫描多个类型的外设
/// \param peripheralTypes 外设列表
///
- (void)scanWithPeripheralTypes:(NSArray<NSNumber *> * _Nonnull)peripheralTypes;
/// 停止扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)stopScanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 停止扫描（全部外设类型）
- (void)stopScan;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac timeout:(double)timeout;
/// 连接指定外设
/// \param peripheral 外设
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
/// 连接指定外设
/// \param peripheral 外设
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral timeout:(double)timeout;
/// 取消（断开）指定外设连接
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)cancelConnectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 取消（断开）指定外设连接
/// \param peripheral 外设
///
- (void)cancelConnectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK27KKBLECentralManagerDelegate_")
@protocol KKBLECentralManagerDelegate
/// 中心状态发送改变
/// \param central 中心
///
/// \param state 状态
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didUpdateState:(enum KKBLECentralState)state;
@optional
/// 发现外设
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param RSSI 信号强度
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDiscover:(id <KKPeripheral> _Nonnull)peripheral rssi:(NSNumber * _Nonnull)RSSI;
/// 外设连接成功
/// \param central 中心
///
/// \param peripheral 外设
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didConnect:(id <KKPeripheral> _Nonnull)peripheral;
/// 外设连接失败
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didFailToConnect:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 外设断开连接
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDisconnectPeripheral:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, KKBLECentralState, open) {
/// 未知
  KKBLECentralStateUnknown = 0,
/// 重置
  KKBLECentralStateResetting = 1,
/// 不支持
  KKBLECentralStateUnsupported = 2,
/// 未授权
  KKBLECentralStateUnauthorized = 3,
/// 电源关闭
  KKBLECentralStatePoweredOff = 4,
/// 电源打开
  KKBLECentralStatePoweredOn = 5,
};

@protocol KKBLEHealthScalePeripheralDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKBLEHealthScalePeripheral")
@interface KKBLEHealthScalePeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 读取身体数据
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
- (void)readBodyDataWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height;
/// 读取身体报告
- (void)readBodyReport;
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end





@class KKHealthScaleBodyDataModel;
enum KKHealthScaleBodyDataErrorType : NSInteger;
enum KKHealthScaleReportDataErrorType : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK34KKBLEHealthScalePeripheralDelegate_")
@protocol KKBLEHealthScalePeripheralDelegate
/// 接收到 身体数据
/// \param peripheral 外设
///
/// \param data 身体数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveBodyData:(KKHealthScaleBodyDataModel * _Nonnull)data errorType:(enum KKHealthScaleBodyDataErrorType)errorType;
/// 接受到报告数据
/// \param peripheral 外设
///
/// \param data 报告数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveReportData:(NSString * _Nullable)data errorType:(enum KKHealthScaleReportDataErrorType)errorType;
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK18KKBLEPeripheralAPI")
@interface KKBLEPeripheralAPI : NSObject
/// 是否授权
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAuth;)
+ (BOOL)isAuth SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAuth:(BOOL)value;
/// 是否开启日志，默认开始日志
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logEnabled;)
+ (BOOL)logEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogEnabled:(BOOL)value;
/// 注册APP
/// \param appID 在开发者中心申请的ID
///
+ (void)registerWithAppID:(NSString * _Nonnull)appID callBack:(void (^ _Nonnull)(BOOL))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KKBLEPeripheralDFUManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKBLEPeripheralDFUManager")
@interface KKBLEPeripheralDFUManager : NSObject
@property (nonatomic, weak) id <KKBLEPeripheralDFUManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 升级
/// \param peripheral 外设
///
/// \param url 固件地址
///
- (void)updateWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral url:(NSString * _Nonnull)url;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUProgressDelegate>
- (void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUServiceDelegate>
- (void)dfuStateDidChangeTo:(enum DFUState)state;
- (void)dfuError:(enum DFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
@end

@class CBCentralManager;

@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

enum KKBLEPeripheralDFUManagerError : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK33KKBLEPeripheralDFUManagerDelegate_")
@protocol KKBLEPeripheralDFUManagerDelegate
/// 升级成功回调
/// \param manager DFU管理器
///
- (void)dfuManagerUpdateSuccess:(KKBLEPeripheralDFUManager * _Nonnull)manager;
/// 升级失败回调
/// \param manager DFU管理器
///
/// \param error 错误
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateFailure:(enum KKBLEPeripheralDFUManagerError)error;
@optional
/// 升级进度回调
/// \param manager DFU管理器
///
/// \param progress 进度
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateProgress:(NSInteger)progress;
@end

typedef SWIFT_ENUM(NSInteger, KKBLEPeripheralDFUManagerError, open) {
/// 进入OTA失败
  KKBLEPeripheralDFUManagerErrorOta = 0,
/// 文件错误
  KKBLEPeripheralDFUManagerErrorFile = 1,
/// 其他原因
  KKBLEPeripheralDFUManagerErrorOther = 2,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyDataErrorType, open) {
/// 没有错误
  KKHealthScaleBodyDataErrorTypeNone = 0,
/// 阻抗有误,阻抗有误时, 不计算除BMI/idealWeightKg以外参数(写0)
  KKHealthScaleBodyDataErrorTypeImpedance = 1,
/// 年龄参数有误，需在 6 ~ 99岁(不计算除BMI/idealWeightKg以外参数)
  KKHealthScaleBodyDataErrorTypeAge = 2,
/// 体重参数有误，需在 10 ~ 200kg(有误不计算所有参数)
  KKHealthScaleBodyDataErrorTypeWeight = 3,
/// 身高参数有误，需在 90 ~ 220cm(不计算所有参数)
  KKHealthScaleBodyDataErrorTypeHeight = 4,
};

enum KKHealthScaleBodyType : NSInteger;
@class KKHealthScaleRatingModel;
enum KKHealthScaleBodyHealthType : NSInteger;
enum KKHealthScaleBodyFatGrade : NSInteger;
enum KKHealthScaleBodyHealthGrade : NSInteger;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKHealthScaleBodyDataModel")
@interface KKHealthScaleBodyDataModel : NSObject
/// 性别
@property (nonatomic) enum KKSexType sex;
/// 年龄(岁)，需在6 ~ 99岁
@property (nonatomic) NSInteger age;
/// 身高(cm)，需在 90 ~ 220cm
@property (nonatomic) double height;
/// 体重(kg)，需在 10  ~ 200kg
@property (nonatomic) double weight;
/// 身体类型
@property (nonatomic) enum KKHealthScaleBodyType bodyType;
/// 身体年龄,6~99岁
@property (nonatomic) NSInteger bodyAge;
/// 身体得分，50 ~ 100分
@property (nonatomic) NSInteger bodyScore;
/// 理想体重(kg)
@property (nonatomic) double idealWeight;
/// 标准体重(kg)
@property (nonatomic) double standardWeight;
/// 去脂体重(kg)
@property (nonatomic) double loseFatWeight;
/// 控制体重(kg)
@property (nonatomic) double controlWeight;
/// 人体质量指数, 分辨率0.1, 范围10.0 ~ 90.0
@property (nonatomic) double bmi;
/// BMI健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmiRatingList;
/// 基础代谢, 分辨率1, 范围500 ~ 10000
@property (nonatomic) NSInteger bmr;
/// BMR基础代谢健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmrRatingList;
/// 蛋白质率（%）, 范围2.0% ~ 30.0%
@property (nonatomic) double proteinPercentage;
/// 蛋白质健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull proteinRatingList;
/// 内脏脂肪, 分辨率1, 范围1 ~ 60
@property (nonatomic) NSInteger vfal;
/// 内脏脂肪等级标准字典,“标准-警惕”“警惕-危险”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull vfalRatingList;
/// 骨量(kg), 分辨率0.1, 范围0.5 ~ 8.0
@property (nonatomic) double boneWeight;
/// 骨量等级标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull boneRatingList;
/// 脂肪量(kg)
@property (nonatomic) double fatWeight;
/// 脂肪率(%), 分辨率0.1, 范围5.0% ~ 75.0%
@property (nonatomic) double fatPercentage;
/// 脂肪率健康标准字典”偏瘦-标准”“标准-警惕”“警惕-偏胖”“偏胖-肥胖”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull fatRatingList;
/// 脂肪控制量(kg)
@property (nonatomic) double fatControlWeight;
/// 皮下脂肪(%)
@property (nonatomic) double subcutaneousFatPercentage;
/// 水分率(%), 分辨率0.1, 范围35.0% ~ 75.0%
@property (nonatomic) double waterPercentage;
/// 水分率健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull waterRatingList;
/// 肌肉量(kg), 分辨率0.1, 范围10.0 ~ 120.0
@property (nonatomic) double muscleWeight;
/// 肌肉率(%),分辨率0.1，范围5%~90%
@property (nonatomic) double musclePercentage;
/// 肌肉量健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull muscleRatingList;
/// 肌肉控制量(kg)
@property (nonatomic) double muscleControlWeight;
/// 骨骼肌率(%)
@property (nonatomic) double skeletalPercentage;
/// 脚对脚阻抗值(Ω), 范围200.0 ~ 1200.0
@property (nonatomic) double twoLegImpedance;
/// 健康评估
@property (nonatomic) enum KKHealthScaleBodyHealthType healthType;
/// 肥胖等级
@property (nonatomic) enum KKHealthScaleBodyFatGrade fatGrade;
/// 健康等级
@property (nonatomic) enum KKHealthScaleBodyHealthGrade healthGrade;
- (NSString * _Nonnull)jsonsString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyFatGrade, open) {
/// 肥胖1级
  KKHealthScaleBodyFatGradeOne = 0,
/// 肥胖2级
  KKHealthScaleBodyFatGradeTwo = 1,
/// 肥胖3级
  KKHealthScaleBodyFatGradeThree = 2,
/// 参数错误
  KKHealthScaleBodyFatGradeError = 3,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthGrade, open) {
/// 偏瘦型
  KKHealthScaleBodyHealthGradeThin = 0,
/// 标准型
  KKHealthScaleBodyHealthGradeThinMuscle = 1,
/// 超重型
  KKHealthScaleBodyHealthGradeMuscular = 2,
/// 肥胖型
  KKHealthScaleBodyHealthGradeLackofexercise = 3,
/// 参数错误
  KKHealthScaleBodyHealthGradeError = 4,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthType, open) {
/// 健康存在隐患
  KKHealthScaleBodyHealthTypeAssessment1 = 0,
/// 亚健康
  KKHealthScaleBodyHealthTypeAssessment2 = 1,
/// 一般
  KKHealthScaleBodyHealthTypeAssessment3 = 2,
/// 良好
  KKHealthScaleBodyHealthTypeAssessment4 = 3,
/// 非常好
  KKHealthScaleBodyHealthTypeAssessment5 = 4,
/// 参数错误
  KKHealthScaleBodyHealthTypeError = 5,
};

/// 身体类型
typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyType, open) {
/// 偏瘦型
  KKHealthScaleBodyTypeThin = 0,
/// 偏瘦肌肉型
  KKHealthScaleBodyTypeThinMuscle = 1,
/// 肌肉发达型
  KKHealthScaleBodyTypeMuscular = 2,
/// 缺乏运动型
  KKHealthScaleBodyTypeLackofexercise = 3,
/// 标准型
  KKHealthScaleBodyTypeStandard = 4,
/// 标准肌肉型
  KKHealthScaleBodyTypeStandardMuscle = 5,
/// 浮肿肥胖型
  KKHealthScaleBodyTypeObesFat = 6,
/// 偏胖肌肉型
  KKHealthScaleBodyTypeFatMuscle = 7,
/// 肌肉型偏胖
  KKHealthScaleBodyTypeMuscleFat = 8,
/// 参数错误
  KKHealthScaleBodyTypeError = 9,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKHealthScaleRatingModel")
@interface KKHealthScaleRatingModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleReportDataErrorType, open) {
/// 没有错误
  KKHealthScaleReportDataErrorTypeNone = 0,
/// 网络
  KKHealthScaleReportDataErrorTypeNet = 1,
};


/// 离线运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOfflineSportType, open) {
/// 健步
  KKPeripheralOfflineSportTypeBriskWalking = 4,
/// 跑步
  KKPeripheralOfflineSportTypeRunning = 5,
/// 骑行
  KKPeripheralOfflineSportTypeRiding = 6,
/// 自由训练
  KKPeripheralOfflineSportTypeFree = 7,
};

/// 外设线上运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOnlineSportType, open) {
/// 室内跑步
  KKPeripheralOnlineSportTypeIndoorRunning = 8,
/// 室外跑步
  KKPeripheralOnlineSportTypeOutdoorRunning = 9,
/// 课程
  KKPeripheralOnlineSportTypeCourse = 10,
};

/// 快快外设类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralType, open) {
/// 臂带
  KKPeripheralTypeArmBand = 0,
/// 健康秤
  KKPeripheralTypeHealthScale = 1,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKPeripheralVersionModel")
@interface KKPeripheralVersionModel : NSObject
/// 固件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// 固件编译时间（UTC时间戳）
@property (nonatomic, readonly) NSTimeInterval firmwareCompileTime;
/// BootLoader版本
@property (nonatomic, readonly, copy) NSString * _Nonnull bootLoader;
/// 硬件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK27KKPreipheralUpdateInfoModel")
@interface KKPreipheralUpdateInfoModel : NSObject
/// 版本
@property (nonatomic, copy) NSString * _Nonnull version;
/// 详情
@property (nonatomic, copy) NSString * _Nonnull detail;
/// 图片
@property (nonatomic, copy) NSString * _Nonnull image;
/// 更新时间
@property (nonatomic) NSInteger updateTime;
/// 固件地址
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 性别
typedef SWIFT_ENUM(NSInteger, KKSexType, open) {
/// 女性
  KKSexTypeFemale = 0,
/// 男性
  KKSexTypeMale = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2 (swift-5.2-RELEASE)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
@import iOSDFULibrary;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KKBLEPeripheralSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 臂带绑定结果
typedef SWIFT_ENUM(NSInteger, KKArmBandBindResult, open) {
/// 绑定成功
  KKArmBandBindResultSuccess = 0,
/// flash保存失败
  KKArmBandBindResultFlash = 1,
/// 设备处于运动模式中
  KKArmBandBindResultInSport = 2,
/// 超时
  KKArmBandBindResultTimeout = 3,
/// 未知错误
  KKArmBandBindResultUnkonw = 4,
};

enum KKPeripheralOfflineSportType : NSInteger;
@class KKArmBandHistoryDetailDataModel;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKArmBandHistoryDataModel")
@interface KKArmBandHistoryDataModel : NSObject
/// 运动类型
@property (nonatomic, readonly) enum KKPeripheralOfflineSportType sportType;
/// 开始时间
@property (nonatomic, readonly) NSTimeInterval startTime;
/// 持续时间
@property (nonatomic, readonly) NSInteger duration;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分米）
@property (nonatomic, readonly) NSInteger distance;
/// 详情
@property (nonatomic, copy) NSArray<KKArmBandHistoryDetailDataModel *> * _Nonnull details;
- (NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK31KKArmBandHistoryDetailDataModel")
@interface KKArmBandHistoryDetailDataModel : NSObject
/// 心率数组
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull heartRates;
/// 配速
@property (nonatomic, readonly) NSInteger pace;
/// 步频
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 读取历史数据结果
typedef SWIFT_ENUM(NSInteger, KKArmBandHistoryResult, open) {
/// 成功
  KKArmBandHistoryResultSuccess = 0,
/// 运动中
  KKArmBandHistoryResultInSport = 1,
};

enum KKPeripheralOnlineSportType : NSInteger;

/// 臂带运动数据模型
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK23KKArmBandSportDataModel")
@interface KKArmBandSportDataModel : NSObject
@property (nonatomic, readonly) enum KKPeripheralOnlineSportType sportType;
/// 心率
@property (nonatomic, readonly) NSInteger heartRate;
/// 步数
@property (nonatomic, readonly) NSInteger steps;
/// 卡路里
@property (nonatomic, readonly) NSInteger calorie;
/// 距离（分⽶）
@property (nonatomic, readonly) NSInteger distance;
/// 配速（秒/公⾥）
@property (nonatomic, readonly) NSInteger pace;
/// 步频（步/分钟）
@property (nonatomic, readonly) NSInteger cadence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 开始运动结果
typedef SWIFT_ENUM(NSInteger, KKArmBandStartSportResult, open) {
/// 开启成功
  KKArmBandStartSportResultSuccess = 0,
/// 充电中
  KKArmBandStartSportResultCharging = 1,
/// 电量过低
  KKArmBandStartSportResultChargeLow = 2,
/// 未知错误
  KKArmBandStartSportResultUnknown = 3,
};

enum KKPeripheralType : NSInteger;

/// 快快外设抽象类
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK12KKPeripheral_")
@protocol KKPeripheral
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
@end

@protocol KKBLEArmBandPeripheralDelegate;

/// 快快蓝牙臂带外设
SWIFT_CLASS("_TtC18KKBLEPeripheralSDK22KKBLEArmBandPeripheral")
@interface KKBLEArmBandPeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEArmBandPeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end







enum KKSexType : NSInteger;

@interface KKBLEArmBandPeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 设置LED亮度
/// \param level 亮度等级（1 ～ 10）
///
- (void)setBrightnessWithLevel:(NSInteger)level;
/// 设置时间（时间同步）
- (void)setTimeWithDate:(NSDate * _Nonnull)date;
/// 读取电量
- (void)readBattery;
/// 读取版本号
- (void)readVersion;
/// 检查新版本
- (void)checkNewVersion;
/// 设置用户信息
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
/// \param weight 体重（kg）
///
/// \param pulse 静态心率
///
- (void)setUserWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height weight:(double)weight pulse:(NSInteger)pulse;
/// 开始绑定
/// \param timeout 超时时间
///
- (void)bindWithTimeout:(double)timeout;
/// 开始运动
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence dataReturnCycle:(NSInteger)dataReturnCycle;
/// 开始运动（多设备运动使用）
/// \param sportType 运动类型
///
/// \param startMetronome 是否开启节拍器
///
/// \param cadence 步频(步/分钟)
///
/// \param time 多设备数据同步使用，保持时间一致
///
/// \param dataReturnCycle 数据自动返回周期，可设置为（1 ～ 14）。设置其他值则不会自动返回运动数据（可通过 <code>readSportData</code> 主动获取运动数据）。
///
- (void)startSportWithSportType:(enum KKPeripheralOnlineSportType)sportType startMetronome:(BOOL)startMetronome cadence:(NSInteger)cadence time:(NSDate * _Nonnull)time dataReturnCycle:(NSInteger)dataReturnCycle;
/// 读取运动数据
/// \param cal 当前的卡路里（同步数据使用，设备断开或其他异常情况）
///
- (void)readSportDataWithCal:(NSInteger)cal;
/// 停止运动
- (void)stopSport;
/// 停止运动（多设备运动使用）
/// \param time 多设备数据同步使用，保持时间一致
///
- (void)stopSportWithTime:(NSDate * _Nonnull)time;
/// 读取历史数据
- (void)readHistoryData;
/// 寻找设备
- (void)seek;
@end

@class KKPeripheralVersionModel;
@class KKPreipheralUpdateInfoModel;

/// 快快蓝牙臂带外设代理
SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK30KKBLEArmBandPeripheralDelegate_")
@protocol KKBLEArmBandPeripheralDelegate
@optional
/// 绑定结果返回
/// \param peripheral 臂带外设
///
/// \param result 绑定结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBindResult:(enum KKArmBandBindResult)result;
/// 电量返回
/// \param peripheral 臂带外设
///
/// \param battery 电量（0 ~ 100）
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveBattery:(NSInteger)battery;
/// 配置用户信息结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetUserInfoResult:(BOOL)result;
/// 配置亮度结果返回
/// \param peripheral 臂带外设
///
/// \param result 是否配置成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSetBrightnessResult:(BOOL)result;
/// 同步时间结果
/// \param peripheral 臂带外设
///
/// \param result 是否同步成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveSyncTimeResult:(BOOL)result;
/// 外设版本返回
/// \param peripheral 外设
///
/// \param version 版本信息
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveVersion:(KKPeripheralVersionModel * _Nonnull)version;
/// 检查新版结果返回
/// \param peripheral 外设
///
/// \param info 新版本信息，<code>nil</code> 表示没有新版本
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveNewVersionInfo:(KKPreipheralUpdateInfoModel * _Nullable)info;
/// 历史数据返回
/// \param peripheral 外设
///
/// \param result 结果
///
/// \param datas 数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveHistoryResult:(enum KKArmBandHistoryResult)result datas:(NSArray<KKArmBandHistoryDataModel *> * _Nonnull)datas;
/// 开始运动结果返回
/// \param peripheral 外设
///
/// \param result 开始结果
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStartSportResult:(enum KKArmBandStartSportResult)result;
/// 运动实时数据返回
/// \param peripheral 外设
///
/// \param data 运动数据
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didSportData:(KKArmBandSportDataModel * _Nonnull)data;
/// 停止运动结果返回
/// \param peripheral 外设
///
/// \param result 是否停止成功
///
- (void)armBandPeripheral:(KKBLEArmBandPeripheral * _Nonnull)peripheral didReceiveStopSportResult:(BOOL)result;
@end

enum KKBLECentralState : NSInteger;
@protocol KKBLECentralManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK19KKBLECentralManager")
@interface KKBLECentralManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KKBLECentralManager * _Nonnull manager;)
+ (KKBLECentralManager * _Nonnull)manager SWIFT_WARN_UNUSED_RESULT;
/// 中央管理器状态
@property (nonatomic, readonly) enum KKBLECentralState state;
/// 代理
@property (nonatomic, weak) id <KKBLECentralManagerDelegate> _Nullable delegate;
/// 构造函数
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface KKBLECentralManager (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)scanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 扫描多个类型的外设
/// \param peripheralTypes 外设列表
///
- (void)scanWithPeripheralTypes:(NSArray<NSNumber *> * _Nonnull)peripheralTypes;
/// 停止扫描指定类型的外设
/// \param peripheralType 外设类型
///
- (void)stopScanWithPeripheralType:(enum KKPeripheralType)peripheralType;
/// 停止扫描（全部外设类型）
- (void)stopScan;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 连接指定外设
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac timeout:(double)timeout;
/// 连接指定外设
/// \param peripheral 外设
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
/// 连接指定外设
/// \param peripheral 外设
///
/// \param timeout 超时时间
///
- (void)connectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral timeout:(double)timeout;
/// 取消（断开）指定外设连接
/// \param peripheralType 外设类型
///
/// \param mac mac地址
///
- (void)cancelConnectWithPeripheralType:(enum KKPeripheralType)peripheralType mac:(NSString * _Nonnull)mac;
/// 取消（断开）指定外设连接
/// \param peripheral 外设
///
- (void)cancelConnectWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral;
@end

@class NSNumber;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK27KKBLECentralManagerDelegate_")
@protocol KKBLECentralManagerDelegate
/// 中心状态发送改变
/// \param central 中心
///
/// \param state 状态
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didUpdateState:(enum KKBLECentralState)state;
@optional
/// 发现外设
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param RSSI 信号强度
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDiscover:(id <KKPeripheral> _Nonnull)peripheral rssi:(NSNumber * _Nonnull)RSSI;
/// 外设连接成功
/// \param central 中心
///
/// \param peripheral 外设
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didConnect:(id <KKPeripheral> _Nonnull)peripheral;
/// 外设连接失败
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didFailToConnect:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 外设断开连接
/// \param central 中心
///
/// \param peripheral 外设
///
/// \param error 错误
///
- (void)centralManager:(KKBLECentralManager * _Nonnull)central didDisconnectPeripheral:(id <KKPeripheral> _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, KKBLECentralState, open) {
/// 未知
  KKBLECentralStateUnknown = 0,
/// 重置
  KKBLECentralStateResetting = 1,
/// 不支持
  KKBLECentralStateUnsupported = 2,
/// 未授权
  KKBLECentralStateUnauthorized = 3,
/// 电源关闭
  KKBLECentralStatePoweredOff = 4,
/// 电源打开
  KKBLECentralStatePoweredOn = 5,
};

@protocol KKBLEHealthScalePeripheralDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKBLEHealthScalePeripheral")
@interface KKBLEHealthScalePeripheral : NSObject <KKPeripheral>
/// 外设类型
@property (nonatomic, readonly) enum KKPeripheralType type;
/// 外设名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 外设mac
@property (nonatomic, copy) NSString * _Nonnull mac;
- (nonnull instancetype)initWithMac:(NSString * _Nonnull)mac OBJC_DESIGNATED_INITIALIZER;
/// 添加代理
/// \param delegate 代理
///
- (void)appendDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
/// 移除代理
/// \param delegate 代理
///
- (void)removeDelegate:(id <KKBLEHealthScalePeripheralDelegate> _Nonnull)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK))
/// 读取身体数据
/// \param userUUID 用户UUID（唯一标示）
///
/// \param sex 性别
///
/// \param age 年龄
///
/// \param height 身高（cm）
///
- (void)readBodyDataWithUserUUID:(NSString * _Nonnull)userUUID sex:(enum KKSexType)sex age:(NSInteger)age height:(double)height;
/// 读取身体报告
- (void)readBodyReport;
@end




@interface KKBLEHealthScalePeripheral (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBPeripheralDelegate>
/// 发现外设服务
/// \param peripheral 系统外设
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 发现外设特征
/// \param peripheral 系统外设
///
/// \param service 服务
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// 外设特征值更新
/// \param peripheral 外设
///
/// \param characteristic 特征
///
/// \param error 错误
///
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end





@class KKHealthScaleBodyDataModel;
enum KKHealthScaleBodyDataErrorType : NSInteger;
enum KKHealthScaleReportDataErrorType : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK34KKBLEHealthScalePeripheralDelegate_")
@protocol KKBLEHealthScalePeripheralDelegate
/// 接收到 身体数据
/// \param peripheral 外设
///
/// \param data 身体数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveBodyData:(KKHealthScaleBodyDataModel * _Nonnull)data errorType:(enum KKHealthScaleBodyDataErrorType)errorType;
/// 接受到报告数据
/// \param peripheral 外设
///
/// \param data 报告数据
///
/// \param errorType 错误
///
- (void)healthScalePeripheral:(KKBLEHealthScalePeripheral * _Nonnull)peripheral didReceiveReportData:(NSString * _Nullable)data errorType:(enum KKHealthScaleReportDataErrorType)errorType;
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK18KKBLEPeripheralAPI")
@interface KKBLEPeripheralAPI : NSObject
/// 是否授权
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAuth;)
+ (BOOL)isAuth SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAuth:(BOOL)value;
/// 是否开启日志，默认开始日志
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL logEnabled;)
+ (BOOL)logEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogEnabled:(BOOL)value;
/// 注册APP
/// \param appID 在开发者中心申请的ID
///
+ (void)registerWithAppID:(NSString * _Nonnull)appID callBack:(void (^ _Nonnull)(BOOL))callBack;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol KKBLEPeripheralDFUManagerDelegate;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK25KKBLEPeripheralDFUManager")
@interface KKBLEPeripheralDFUManager : NSObject
@property (nonatomic, weak) id <KKBLEPeripheralDFUManagerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 升级
/// \param peripheral 外设
///
/// \param url 固件地址
///
- (void)updateWithPeripheral:(id <KKPeripheral> _Nonnull)peripheral url:(NSString * _Nonnull)url;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUProgressDelegate>
- (void)dfuProgressDidChangeFor:(NSInteger)part outOf:(NSInteger)totalParts to:(NSInteger)progress currentSpeedBytesPerSecond:(double)currentSpeedBytesPerSecond avgSpeedBytesPerSecond:(double)avgSpeedBytesPerSecond;
@end


@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <DFUServiceDelegate>
- (void)dfuStateDidChangeTo:(enum DFUState)state;
- (void)dfuError:(enum DFUError)error didOccurWithMessage:(NSString * _Nonnull)message;
@end

@class CBCentralManager;

@interface KKBLEPeripheralDFUManager (SWIFT_EXTENSION(KKBLEPeripheralSDK)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

enum KKBLEPeripheralDFUManagerError : NSInteger;

SWIFT_PROTOCOL("_TtP18KKBLEPeripheralSDK33KKBLEPeripheralDFUManagerDelegate_")
@protocol KKBLEPeripheralDFUManagerDelegate
/// 升级成功回调
/// \param manager DFU管理器
///
- (void)dfuManagerUpdateSuccess:(KKBLEPeripheralDFUManager * _Nonnull)manager;
/// 升级失败回调
/// \param manager DFU管理器
///
/// \param error 错误
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateFailure:(enum KKBLEPeripheralDFUManagerError)error;
@optional
/// 升级进度回调
/// \param manager DFU管理器
///
/// \param progress 进度
///
- (void)dfuManager:(KKBLEPeripheralDFUManager * _Nonnull)manager didUpdateProgress:(NSInteger)progress;
@end

typedef SWIFT_ENUM(NSInteger, KKBLEPeripheralDFUManagerError, open) {
/// 进入OTA失败
  KKBLEPeripheralDFUManagerErrorOta = 0,
/// 文件错误
  KKBLEPeripheralDFUManagerErrorFile = 1,
/// 其他原因
  KKBLEPeripheralDFUManagerErrorOther = 2,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyDataErrorType, open) {
/// 没有错误
  KKHealthScaleBodyDataErrorTypeNone = 0,
/// 阻抗有误,阻抗有误时, 不计算除BMI/idealWeightKg以外参数(写0)
  KKHealthScaleBodyDataErrorTypeImpedance = 1,
/// 年龄参数有误，需在 6 ~ 99岁(不计算除BMI/idealWeightKg以外参数)
  KKHealthScaleBodyDataErrorTypeAge = 2,
/// 体重参数有误，需在 10 ~ 200kg(有误不计算所有参数)
  KKHealthScaleBodyDataErrorTypeWeight = 3,
/// 身高参数有误，需在 90 ~ 220cm(不计算所有参数)
  KKHealthScaleBodyDataErrorTypeHeight = 4,
};

enum KKHealthScaleBodyType : NSInteger;
@class KKHealthScaleRatingModel;
enum KKHealthScaleBodyHealthType : NSInteger;
enum KKHealthScaleBodyFatGrade : NSInteger;
enum KKHealthScaleBodyHealthGrade : NSInteger;

SWIFT_CLASS("_TtC18KKBLEPeripheralSDK26KKHealthScaleBodyDataModel")
@interface KKHealthScaleBodyDataModel : NSObject
/// 性别
@property (nonatomic) enum KKSexType sex;
/// 年龄(岁)，需在6 ~ 99岁
@property (nonatomic) NSInteger age;
/// 身高(cm)，需在 90 ~ 220cm
@property (nonatomic) double height;
/// 体重(kg)，需在 10  ~ 200kg
@property (nonatomic) double weight;
/// 身体类型
@property (nonatomic) enum KKHealthScaleBodyType bodyType;
/// 身体年龄,6~99岁
@property (nonatomic) NSInteger bodyAge;
/// 身体得分，50 ~ 100分
@property (nonatomic) NSInteger bodyScore;
/// 理想体重(kg)
@property (nonatomic) double idealWeight;
/// 标准体重(kg)
@property (nonatomic) double standardWeight;
/// 去脂体重(kg)
@property (nonatomic) double loseFatWeight;
/// 控制体重(kg)
@property (nonatomic) double controlWeight;
/// 人体质量指数, 分辨率0.1, 范围10.0 ~ 90.0
@property (nonatomic) double bmi;
/// BMI健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmiRatingList;
/// 基础代谢, 分辨率1, 范围500 ~ 10000
@property (nonatomic) NSInteger bmr;
/// BMR基础代谢健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull bmrRatingList;
/// 蛋白质率（%）, 范围2.0% ~ 30.0%
@property (nonatomic) double proteinPercentage;
/// 蛋白质健康标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull proteinRatingList;
/// 内脏脂肪, 分辨率1, 范围1 ~ 60
@property (nonatomic) NSInteger vfal;
/// 内脏脂肪等级标准字典,“标准-警惕”“警惕-危险”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull vfalRatingList;
/// 骨量(kg), 分辨率0.1, 范围0.5 ~ 8.0
@property (nonatomic) double boneWeight;
/// 骨量等级标准
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull boneRatingList;
/// 脂肪量(kg)
@property (nonatomic) double fatWeight;
/// 脂肪率(%), 分辨率0.1, 范围5.0% ~ 75.0%
@property (nonatomic) double fatPercentage;
/// 脂肪率健康标准字典”偏瘦-标准”“标准-警惕”“警惕-偏胖”“偏胖-肥胖”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull fatRatingList;
/// 脂肪控制量(kg)
@property (nonatomic) double fatControlWeight;
/// 皮下脂肪(%)
@property (nonatomic) double subcutaneousFatPercentage;
/// 水分率(%), 分辨率0.1, 范围35.0% ~ 75.0%
@property (nonatomic) double waterPercentage;
/// 水分率健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull waterRatingList;
/// 肌肉量(kg), 分辨率0.1, 范围10.0 ~ 120.0
@property (nonatomic) double muscleWeight;
/// 肌肉率(%),分辨率0.1，范围5%~90%
@property (nonatomic) double musclePercentage;
/// 肌肉量健康标准 “不足-标准”“标准-优秀”
@property (nonatomic, copy) NSArray<KKHealthScaleRatingModel *> * _Nonnull muscleRatingList;
/// 肌肉控制量(kg)
@property (nonatomic) double muscleControlWeight;
/// 骨骼肌率(%)
@property (nonatomic) double skeletalPercentage;
/// 脚对脚阻抗值(Ω), 范围200.0 ~ 1200.0
@property (nonatomic) double twoLegImpedance;
/// 健康评估
@property (nonatomic) enum KKHealthScaleBodyHealthType healthType;
/// 肥胖等级
@property (nonatomic) enum KKHealthScaleBodyFatGrade fatGrade;
/// 健康等级
@property (nonatomic) enum KKHealthScaleBodyHealthGrade healthGrade;
- (NSString * _Nonnull)jsonsString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyFatGrade, open) {
/// 肥胖1级
  KKHealthScaleBodyFatGradeOne = 0,
/// 肥胖2级
  KKHealthScaleBodyFatGradeTwo = 1,
/// 肥胖3级
  KKHealthScaleBodyFatGradeThree = 2,
/// 参数错误
  KKHealthScaleBodyFatGradeError = 3,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthGrade, open) {
/// 偏瘦型
  KKHealthScaleBodyHealthGradeThin = 0,
/// 标准型
  KKHealthScaleBodyHealthGradeThinMuscle = 1,
/// 超重型
  KKHealthScaleBodyHealthGradeMuscular = 2,
/// 肥胖型
  KKHealthScaleBodyHealthGradeLackofexercise = 3,
/// 参数错误
  KKHealthScaleBodyHealthGradeError = 4,
};

typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyHealthType, open) {
/// 健康存在隐患
  KKHealthScaleBodyHealthTypeAssessment1 = 0,
/// 亚健康
  KKHealthScaleBodyHealthTypeAssessment2 = 1,
/// 一般
  KKHealthScaleBodyHealthTypeAssessment3 = 2,
/// 良好
  KKHealthScaleBodyHealthTypeAssessment4 = 3,
/// 非常好
  KKHealthScaleBodyHealthTypeAssessment5 = 4,
/// 参数错误
  KKHealthScaleBodyHealthTypeError = 5,
};

/// 身体类型
typedef SWIFT_ENUM(NSInteger, KKHealthScaleBodyType, open) {
/// 偏瘦型
  KKHealthScaleBodyTypeThin = 0,
/// 偏瘦肌肉型
  KKHealthScaleBodyTypeThinMuscle = 1,
/// 肌肉发达型
  KKHealthScaleBodyTypeMuscular = 2,
/// 缺乏运动型
  KKHealthScaleBodyTypeLackofexercise = 3,
/// 标准型
  KKHealthScaleBodyTypeStandard = 4,
/// 标准肌肉型
  KKHealthScaleBodyTypeStandardMuscle = 5,
/// 浮肿肥胖型
  KKHealthScaleBodyTypeObesFat = 6,
/// 偏胖肌肉型
  KKHealthScaleBodyTypeFatMuscle = 7,
/// 肌肉型偏胖
  KKHealthScaleBodyTypeMuscleFat = 8,
/// 参数错误
  KKHealthScaleBodyTypeError = 9,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKHealthScaleRatingModel")
@interface KKHealthScaleRatingModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KKHealthScaleReportDataErrorType, open) {
/// 没有错误
  KKHealthScaleReportDataErrorTypeNone = 0,
/// 网络
  KKHealthScaleReportDataErrorTypeNet = 1,
};


/// 离线运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOfflineSportType, open) {
/// 健步
  KKPeripheralOfflineSportTypeBriskWalking = 4,
/// 跑步
  KKPeripheralOfflineSportTypeRunning = 5,
/// 骑行
  KKPeripheralOfflineSportTypeRiding = 6,
/// 自由训练
  KKPeripheralOfflineSportTypeFree = 7,
};

/// 外设线上运动类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralOnlineSportType, open) {
/// 室内跑步
  KKPeripheralOnlineSportTypeIndoorRunning = 8,
/// 室外跑步
  KKPeripheralOnlineSportTypeOutdoorRunning = 9,
/// 课程
  KKPeripheralOnlineSportTypeCourse = 10,
};

/// 快快外设类型
typedef SWIFT_ENUM(NSInteger, KKPeripheralType, open) {
/// 臂带
  KKPeripheralTypeArmBand = 0,
/// 健康秤
  KKPeripheralTypeHealthScale = 1,
};


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK24KKPeripheralVersionModel")
@interface KKPeripheralVersionModel : NSObject
/// 固件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// 固件编译时间（UTC时间戳）
@property (nonatomic, readonly) NSTimeInterval firmwareCompileTime;
/// BootLoader版本
@property (nonatomic, readonly, copy) NSString * _Nonnull bootLoader;
/// 硬件版本
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18KKBLEPeripheralSDK27KKPreipheralUpdateInfoModel")
@interface KKPreipheralUpdateInfoModel : NSObject
/// 版本
@property (nonatomic, copy) NSString * _Nonnull version;
/// 详情
@property (nonatomic, copy) NSString * _Nonnull detail;
/// 图片
@property (nonatomic, copy) NSString * _Nonnull image;
/// 更新时间
@property (nonatomic) NSInteger updateTime;
/// 固件地址
@property (nonatomic, copy) NSString * _Nonnull url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 性别
typedef SWIFT_ENUM(NSInteger, KKSexType, open) {
/// 女性
  KKSexTypeFemale = 0,
/// 男性
  KKSexTypeMale = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif
